Absolutely, you can create a configuration file to store base URLs and then import that file wherever you need to use URLs in your React application. This way, if you need to change the base URL, you only have to do it in one place.

Here's a simple example of how you could structure such a configuration file:

1. **Create a `config.js` file:**
   
   ```javascript
   // config.js
   const config = {
     baseURL: 'http://localhost:5000', // your default base URL
     apiEndpoints: {
       users: '/api/users',
       posts: '/api/posts',
       // Add more endpoints as needed
     },
   };

   export default config;
   ```

2. **Use the configuration in your components:**

   ```javascript
   // ExampleComponent.js
   import React, { useEffect, useState } from 'react';
   import config from './config'; // Adjust the path as needed

   const ExampleComponent = () => {
     const [users, setUsers] = useState([]);

     useEffect(() => {
       // Fetch data from the API using the base URL and endpoint
       fetch(config.baseURL + config.apiEndpoints.users)
         .then(response => response.json())
         .then(data => setUsers(data));
     }, []);

     return (
       <div>
         <h1>Users</h1>
         <ul>
           {users.map(user => (
             <li key={user.id}>{user.name}</li>
           ))}
         </ul>
       </div>
     );
   };

   export default ExampleComponent;
   ```

Now, if you need to switch between localhost and an IP address, you only have to update the `baseURL` in the `config.js` file. All components using this configuration will automatically reflect the change.

This approach helps centralize configuration and makes it easier to manage and update URLs across your React application. Additionally, it promotes consistency and reduces the risk of errors when modifying URLs in multiple places.
